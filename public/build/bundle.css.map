{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../App.svelte",
    "../../Menu.svelte",
    "../../Dash.svelte",
    "../../TableView.svelte",
    "../../Table.svelte",
    "../../TableNew.svelte",
    "../../box.svelte",
    "../../dialog.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import Menu from \"./pages/Menu.svelte\";\n  import Dash from \"./pages/Dash.svelte\";\n  import Table from \"./table/Table.svelte\";\n  import TableView from \"./table/TableView.svelte\";\n\n  let choosen = window.choosen;\n  if (choosen == null) {\n    choosen = \"table\";\n  }\n\n  window.updateChoosen = function() {\n    choosen = window.choosen;\n  };\n\n  window.HEIGHT = window.innerHeight - 10;\n  let width;\n  window.addEventListener(\"resize\", () => {\n    location.reload();\n  });\n</script>\n\n<style>\n  #menu {\n    padding: 5px;\n    width: 90px;\n    background: #18212b;\n  }\n\n  #main {\n    background: #1f2b3a;\n    padding: 20px;\n    border-radius: 10px;\n    margin-left: 30px;\n    margin-right: 30px;\n    padding-top: 30px;\n    padding-bottom: 30px;\n    overflow: auto;\n  }\n</style>\n\n<table style=\"width: 100%\">\n  <tr>\n    <td style=\"width: {width}px\">\n      <div id=\"menu\" style=\"height: {window.HEIGHT}px; width: {width}px\">\n        <table bind:clientWidth={width}>\n          <Menu />\n        </table>\n      </div>\n    </td>\n    <td>\n      <div\n        id=\"main\"\n        style=\"max-height: {window.HEIGHT - 100}px; width: {window.innerWidth - 120 - width}px;\">\n        {#if choosen === 'dash'}\n          <Dash />\n        {:else if choosen === 'table'}\n          <Table />\n        {:else if choosen === 'tableview'}\n          <TableView />\n        {/if}\n      </div>\n    </td>\n  </tr>\n</table>\n",
    "<script>\n  import Box from '../components/box.svelte'\n\n  window.changePage = function(to = 'account') {\n    window.choosen = to\n    window.updateChoosen()\n  }\n</script>\n\n<style>\n  div {\n    padding: 20px;\n  }\n</style>\n\n<tr>\n  <td>\n    <Box>\n      <div on:click={() => window.changePage('dash')}>Dashboard</div>\n    </Box>\n  </td>\n</tr>\n<tr>\n  <td>\n    <Box>\n      <div on:click={() => window.changePage('table')}>Table</div>\n    </Box>\n  </td>\n</tr>\n",
    "<script>\n  import Dialog from '../components/dialog.svelte';\n</script>\n\n<style>\n  table {\n    margin: 0 auto;\n  }\n</style>\n\n<table>\n  \n</table>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import Dialog from \"../components/dialog.svelte\";\n  import Box from \"../components/box.svelte\";\n\n  let t = 0;\n  let DATA = [[\"N/A\"]];\n  let EDIT = {};\n  let EDIT_SHOW = false;\n  let EDIT_DATA = [];\n  let colspan;\n  let newData = [];\n  let LOADED = false;\n  let CURRENT_PAGE = 1;\n  let FILTER_SHOW = false;\n  let FILTER_FIELD = 0;\n  let FILTER_VALUE;\n\n  onMount(() => {\n    LOADED = true;\n  });\n\n  let basicData = { columnNames: [] };\n  window.TableDB.get_clean(window.choosenTable, doc => {\n    basicData.columnNames = doc.values;\n    basicData.types = doc.types;\n    colspan = basicData.columnNames.length;\n  });\n\n  window.socket.on(\"update\", () => {\n    getQuery();\n  });\n\n  function submitData() {\n    if (newData.length != 0) {\n      const encFieldValues = [];\n      for (var i = 0; i < basicData.columnNames.length; i++) {\n        encFieldValues.push(basicData.columnNames[i]);\n      }\n      window.socket.emit(\"new query\", {\n        table_name: window.choosenTable,\n        fields: encFieldValues,\n        data: newData\n      });\n      getQuery();\n      const NewData = [];\n      for (var i = 0; i < newData.length; i++) {\n        NewData.push(\"\");\n      }\n      newData = NewData;\n    } else {\n      alert(\"Please Fill The Fields Before Submitting\");\n    }\n  }\n\n  function changeType(inpt) {\n    const i = parseInt(inpt.id);\n    inpt.setAttribute(\"type\", basicData.types[i]);\n  }\n\n  function changeTypeEdit(inpt) {\n    const i = parseInt(inpt.id.replace(\"edit-\", \"\"));\n    inpt.setAttribute(\"type\", basicData.types[i]);\n  }\n\n  function getQuery(page = 1) {\n    window.socket.emit(\"get query\", {\n      name: window.choosenTable,\n      page: page\n    });\n\n    window.socket.on(\"client get query\", data => {\n      const finalResult = [];\n      for (var i = 0; i < data.length; i++) {\n        const row = [];\n        for (var key in data[i]) {\n          row.push(data[i][key]);\n        }\n        finalResult.push(row);\n      }\n      DATA = finalResult;\n    });\n  }\n\n  getQuery();\n\n  function nextPage() {\n    CURRENT_PAGE += 1;\n    getQuery(CURRENT_PAGE);\n  }\n\n  function beforePage() {\n    if (CURRENT_PAGE <= 1) {\n      CURRENT_PAGE = 1;\n    } else {\n      CURRENT_PAGE -= 1;\n    }\n    getQuery(CURRENT_PAGE);\n  }\n\n  function deleteTable() {\n    const confirmation = confirm(\"Are You Sure You Want To Delete This Table?\");\n    if (confirmation) {\n      window.TableDB.get_clean(\"tableNames\", doc => {\n        const filterNames = [];\n        for (var i = 0; i < doc.names.length; i++) {\n          if (doc.names[i] != window.choosenTable) {\n            filterNames.push(doc.names[i]);\n          }\n        }\n\n        window.TableDB.delete(window.choosenTable);\n        window.socket.emit(\"delete table\", { name: window.choosenTable });\n        window.TableDB.put(\"tableNames\", { names: filterNames });\n        location.reload();\n      });\n    }\n  }\n\n  function deleteQuery(rowNum) {\n    const rowData = DATA[rowNum];\n    const confirmation = confirm(\"Are You Sure You Want To Delete This Table?\");\n    if (confirmation) {\n      window.socket.emit(\"delete query\", {\n        name: window.choosenTable,\n        columnNames: basicData.columnNames,\n        data: rowData\n      });\n      DATA.splice(rowNum, 1);\n      DATA = DATA;\n    }\n  }\n\n  function editQuery(rowNum) {\n    const noOfFields = basicData.columnNames.length;\n    const inputs = [];\n    for (var i = 0; i < noOfFields; i++) {\n      inputs.push(\n        document.getElementById(`row-${rowNum}-field-${i}`).innerHTML\n      );\n    }\n    EDIT = {\n      field: basicData.columnNames,\n      type: basicData.types,\n      data: inputs\n    };\n\n    EDIT_DATA = [];\n    for (var i = 0; i < inputs.length; i++) {\n      EDIT_DATA.push(inputs[i]);\n    }\n\n    EDIT_SHOW = true;\n    window.dialog_show(`${window.choosenTable}-edit-dialog`);\n  }\n\n  function update(d) {\n    const confirmation = confirm(\"Are You Sure You Want To Update This Query?\");\n    if (confirmation) {\n      window.socket.emit(\"update query\", {\n        name: window.choosenTable,\n        columnNames: basicData.columnNames,\n        default: EDIT.data,\n        data: EDIT_DATA\n      });\n    }\n  }\n\n  function filterData() {\n    const field = basicData.columnNames[FILTER_FIELD];\n    const value = document.getElementById(\"filterField\").value;\n\n    window.socket.emit(\"filter query\", {\n      table: window.choosenTable,\n      field: field,\n      value: value\n    });\n\n    window.socket.on(\"filter query client\", data => {\n      const finalResult = [];\n      for (var i = 0; i < data.length; i++) {\n        const row = [];\n        for (var key in data[i]) {\n          row.push(data[i][key]);\n        }\n        finalResult.push(row);\n      }\n      DATA = finalResult;\n    });\n  }\n\n  function onClose() {\n    FILTER_SHOW = false;\n    EDIT_SHOW = false;\n  }\n</script>\n\n<style>\n  table {\n    margin: 0 auto;\n    text-align: center;\n  }\n  span {\n    font-weight: bold;\n  }\n  .title {\n    font-size: 40px;\n  }\n  .display {\n    border: 2px solid #6aaac9;\n    padding: 20px;\n  }\n  img {\n    width: 20px;\n    height: 20px;\n  }\n\n  img:hover {\n    background: #112436;\n  }\n\n  button {\n    padding: 10px;\n    padding-left: 20px;\n    padding-right: 20px;\n    border: 1px solid #6aaac9;\n  }\n\n  .delete-button {\n    padding: 20px;\n    width: 100%;\n  }\n\n  .right {\n    animation: backInRight 0.5s;\n  }\n\n  .left {\n    animation: backInLeft 0.5s;\n  }\n\n  .down {\n    animation: backInDown 0.5s;\n  }\n\n  .header {\n    font-size: 160%;\n    font-weight: bold;\n  }\n\n  .mainContent {\n    font-size: 100%;\n    font-weight: bold;\n  }\n\n  .child {\n    width: 100%;\n    height: 100%;\n  }\n\n  fieldset {\n    border-color: #6aaac9;\n  }\n</style>\n\n<svelte:head>\n  <title>{window.choosenTable} | Hope</title>\n</svelte:head>\n\n<table>\n  <tr>\n    <td colspan={colspan + 3}>\n      <span class=\"title unselectable down\">{window.choosenTable}</span>\n    </td>\n  </tr>\n  <br />\n\n  <tr class=\"down\">\n    <td />\n    <td>\n      <Box>\n        <button\n          class=\"delete-button unselectable\"\n          on:click={() => deleteTable()}>\n          Delete\n        </button>\n      </Box>\n    </td>\n\n    <td>\n      {#if LOADED === true}\n        <button\n          on:click={() => (FILTER_SHOW = true)}\n          style=\"width: 100%; margin: 0; border-radius: 0px; border-radius:\n          10px; height: 59px;\">\n          Filter\n        </button>\n        {#if FILTER_SHOW === true}\n          <Dialog\n            title=\"Filter The Table Data\"\n            open=\"true\"\n            {onClose}\n            id=\"{window.choosenTable}-{t}-filter\">\n\n            <table>\n              <tr>\n                <td>\n                  <fieldset>\n                    <legend>Filter By:</legend>\n                    <select bind:value={FILTER_FIELD} class=\"child\">\n                      {#each basicData.columnNames as name, n}\n                        <option value={n}>{name}</option>\n                      {/each}\n                    </select>\n                  </fieldset>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <fieldset>\n                    <legend>Search:</legend>\n                    <input\n                      class=\"child\"\n                      id=\"filterField\"\n                      type={basicData.types[FILTER_FIELD]} />\n                  </fieldset>\n                </td>\n              </tr>\n              <tr>\n                <td>\n                  <button on:click={() => filterData()}>Filter</button>\n                </td>\n              </tr>\n            </table>\n\n          </Dialog>\n        {/if}\n      {/if}\n    </td>\n\n  </tr>\n\n  <tr class=\"down\">\n    <td />\n    {#each basicData.columnNames as name, n}\n      <td>\n        <input\n          id={n}\n          placeholder={name}\n          bind:value={newData[`${n}`]}\n          use:changeType />\n        <br />\n      </td>\n    {/each}\n    <td>\n      <button on:click={() => submitData()}>Submit</button>\n    </td>\n  </tr>\n  <br />\n  <tr class=\"display down\">\n    <td class=\"display unselectable\">\n      <span>No.</span>\n    </td>\n    {#each basicData.columnNames as name}\n      <td class=\"display unselectable header\">\n        <span>{name}</span>\n      </td>\n    {/each}\n    <td colspan=\"2\" class=\"display unselectable\">\n      <span>Setting</span>\n    </td>\n  </tr>\n\n  {#if EDIT_SHOW == true}\n    <Dialog\n      id=\"{window.choosenTable}-edit-dialog\"\n      title=\"EDIT DATA\"\n      style=\"\"\n      open=\"true\">\n      {#each EDIT.data as e, n}\n        <span>Field {EDIT.field[n]}:</span>\n        <input\n          use:changeTypeEdit\n          id=\"edit-{n}\"\n          placeholder={e}\n          bind:value={EDIT_DATA[n]} />\n        <br />\n      {/each}\n      <br />\n      <button on:click={() => update(EDIT)}>Update</button>\n    </Dialog>\n  {/if}\n\n  {#each DATA as d, n}\n    <tr class=\"display\" id=\"row-{n}-{window.choosenTable}-table\">\n      <td class=\"display left\">{n + 1}</td>\n      {#each d as item, m}\n        <td class=\"display right mainContent\" id=\"row-{n}-field-{m}\">{item}</td>\n      {/each}\n      <td>\n        <img\n          on:click={() => editQuery(n)}\n          class=\"display unselectable right\"\n          src=\"/icon-edit.png\"\n          alt=\"Edit\" />\n        <img\n          on:click={() => deleteQuery(n)}\n          class=\"display unselectable right\"\n          src=\"/icon-delete.png\"\n          alt=\"Delete\" />\n      </td>\n    </tr>\n  {/each}\n  <tr class=\"display\">\n    <td />\n    <td>\n      <Box>\n        <button on:click={() => beforePage()} class=\"delete-button\">\n          Previous Page\n        </button>\n      </Box>\n    </td>\n    <td>\n      <Box>\n        <button on:click={() => nextPage()} class=\"delete-button\">\n          Next Page\n        </button>\n      </Box>\n    </td>\n    <td colspan=\"2\" class=\"display unselectable\">Page: {CURRENT_PAGE}</td>\n  </tr>\n</table>\n",
    "<script>\n  import Dialog from \"../components/dialog.svelte\";\n  import Box from \"../components/box.svelte\";\n  import TableNew from \"./TableNew.svelte\";\n\n  let TABLE_NAMES = [];\n\n  window.TableDB = new DB(\"tableDB\");\n  function getUpdates() {\n    window.TableDB.get_clean(\"tableNames\", data => {\n      if (data.names != null) {\n        TABLE_NAMES = data.names;\n      }\n    });\n  }\n  getUpdates();\n\n  window.socket.on(\"update table\", () => {\n    getUpdates();\n  });\n\n  window.TableDB.change(() => {\n    getUpdates();\n  });\n\n  function changeTable(choosen = \"\") {\n    window.changePage(\"tableview\");\n    window.choosenTable = choosen;\n  }\n\n  window.changeTable = changeTable;\n</script>\n\n<style>\n  button {\n    font-weight: bold;\n    margin-right: 10px;\n    border: 1px solid #6aaac9;\n    border-radius: 0px;\n    font-size: 20px;\n    height: 100px;\n    width: 100px;\n    background: #1a2835;\n  }\n\n  .down {\n    position: relative;\n    top: 10px;\n    animation: fadeInDown 0.7s;\n  }\n</style>\n\n<svelte:head>\n  <title>Hope</title>\n</svelte:head>\n\n<Dialog\n  id=\"new-table\"\n  button=\"New Table\"\n  style=\"padding: 7px; border-radius: 0px; height: 100px; width: 100px;\n  margin-left: 0px; animation: fadeInDown 0.7s;\"\n  title=\"Create A New Table\">\n  <TableNew />\n</Dialog>\n\n{#each TABLE_NAMES as name}\n  <button class=\"box down\" title={name} on:click={() => changeTable(name)}>\n    {name.substr(0, 5)}\n  </button>\n{/each}\n",
    "<script>\n  import { encode } from \"../lib/enc.svelte\";\n  let numberOfFields = 2;\n\n  $: fieldList = (NOF => {\n    const l = [];\n    for (var i = 0; i < NOF; i++) {\n      l.push(\"text\");\n    }\n    return l;\n  })(numberOfFields);\n\n  function createTable() {\n    const data = {\n      name: tableName,\n      values: fieldValues,\n      types: fieldTypes\n    };\n    window.TableDB.get(\"tableNames\", doc => {\n      if (doc.names.includes(tableName) != true) {\n        if (doc == null) {\n          window.TableDB.put(\"tableNames\", { names: [data.name] });\n          window.TableDB.put(data.name, data);\n        } else {\n          const d = doc;\n          d.names.push(data.name);\n          window.TableDB.put(\"tableNames\", d);\n          window.TableDB.put(data.name, data);\n        }\n        fieldValues = [\"id\", ...fieldValues];\n        fieldTypes = [\"INTEGER PRIMARY KEY AUTOINCREMENT\", ...fieldTypes];\n\n        const encFieldValues = [];\n        for (var i = 0; i < fieldValues.length; i++) {\n          encFieldValues.push(encode(fieldValues[i]));\n        }\n\n        const newData = {\n          name: tableName,\n          values: encFieldValues,\n          types: fieldTypes\n        };\n\n        window.socket.emit(\"new table\", newData);\n      }\n    });\n\n    window.dialog_close(`new-table`);\n  }\n\n  let fieldValues = [];\n  let fieldTypes = [];\n  let tableName = \"\";\n</script>\n\n<style>\n  tr td {\n    text-align: center;\n  }\n\n  button {\n    border: 1px solid #6aaac9;\n    border-radius: 0px;\n  }\n\n  .style {\n    border: 1px solid #6aaac9;\n    padding: 10px;\n    padding-top: 20px;\n    font-weight: bold;\n  }\n</style>\n\n<table>\n  <tr>\n    <td>\n      <span>Number Of Fields:</span>\n    </td>\n    <td>\n      <input type=\"number\" bind:value={numberOfFields} />\n    </td>\n  </tr>\n  <br />\n  <tr class=\"style\">\n    <td class=\"style\">Field Name</td>\n    <td class=\"style\">Field Type</td>\n  </tr>\n  {#each fieldList as i, n}\n    <tr class=\"style\">\n      <td class=\"style\">\n        <input\n          bind:value={fieldValues[`${n}`]}\n          type=\"text\"\n          placeholder=\"Field {n + 1}\" />\n      </td>\n\n      <td class=\"style\">\n        <select bind:value={fieldTypes[`${n}`]}>\n          <option value=\"text\">text</option>\n          <option value=\"number\">number</option>\n          <option value=\"date\">date</option>\n        </select>\n        <br />\n      </td>\n    </tr>\n  {/each}\n  <br />\n  <br />\n  <br />\n  <tr>\n    <td>\n      <input bind:value={tableName} type=\"text\" placeholder=\"Table Name\" />\n    </td>\n    <td>\n      <button on:click={() => createTable()}>Create Table</button>\n    </td>\n  </tr>\n</table>\n",
    "<style>\n  div {\n    background: #1a2835;\n    border-radius: 10px;\n    text-align: center;\n    cursor: pointer;\n    font-weight: bold;\n    color: #6aaac9;\n    border: 1px solid #6aaac9;\n  }\n</style>\n\n<div class=\"box\">\n  <slot />\n</div>\n",
    "<script>\n  import Box from \"./box.svelte\";\n  import { center } from \"../lib/center.svelte\";\n\n  export let id;\n  if (id == undefined) {\n    id = \"dialog\";\n  }\n\n  export let title;\n  if (title == undefined) {\n    title = \"\";\n  }\n\n  export let button;\n  if (button == undefined) {\n    button = false;\n  }\n\n  export let style;\n  if (style == undefined) {\n    style = \"\";\n  }\n\n  export let open;\n  if (open == undefined) {\n    open = \"false\";\n  }\n\n  export let onClose = ()=>{};\n\n  import { onMount } from \"svelte\";\n  let LOADED = false;\n\n  onMount(() => {\n    const height = window.HEIGHT - 100;\n    if (button) {\n    } else {\n      window.dialog_show(id);\n    }\n    if (open == \"false\") {\n      window.dialog_close(id);\n    }\n  });\n\n  window.dialog_show = id => {\n    //document.getElementById(id).style.display = \"\";\n    LOADED = id;\n  };\n\n  window.dialog_close = id => {\n    //document.getElementById(id).style.display = \"none\";\n    onClose()\n    LOADED = false;\n  };\n</script>\n\n<style>\n  button {\n    padding: 10px;\n    background: #1a2835;\n    border-radius: 10px;\n    text-align: center;\n    cursor: pointer;\n    font-weight: bold;\n    color: #6aaac9;\n    border: 1px solid #6aaac9;\n    border-radius: 50px;\n    margin: 10px;\n  }\n\n  .dialog {\n    background: #1a2835;\n    color: #6aaac9;\n    z-index: 99;\n    position: fixed;\n    border-radius: 10px;\n    padding: 1%;\n    display: block;\n    animation: backInDown 0.3s;\n    max-height: 50vh;\n    overflow: auto;\n  }\n\n  .table {\n    text-align: center;\n  }\n</style>\n\n{#if LOADED === id}\n  <table use:center class=\"dialog\" {id}>\n    <table class=\"table\">\n      <tr>\n        <td colspan=\"5\">\n          <h2 class=\"unselectable\">{title}</h2>\n        </td>\n        <td>\n          <button class=\"unselectable\" on:click={() => window.dialog_close(id)}>\n            X\n          </button>\n        </td>\n      </tr>\n      <tr>\n        <td colspan=\"6\">\n          <slot />\n        </td>\n      </tr>\n    </table>\n  </table>\n{/if}\n{#if button != false}\n  <button class=\"box\" on:click={() => window.dialog_show(`${id}`)} {style}>\n    {button}\n  </button>\n{/if}\n"
  ],
  "names": [],
  "mappings": "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"
}